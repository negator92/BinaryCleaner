# EditorConfig is awesome:http://EditorConfig.org

# top-most EditorConfig file
root = true

# Don't use tabs for indentation.
[*]

# We recommend you to keep these unchanged
end_of_line = crlf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = false
# Change these settings to your own preference
indent_style = space
indent_size = 4
max_line_length = 120
spelling_exclusion_path = SpellingExclusions.dic

[*.{ts,tsx,js,jsx,json,css,scss,yml}]
indent_size = 2

[*.md]
trim_trailing_whitespace = false

[*.groovy]
indent_size = 2

# XML project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,projitems,shproj}]
indent_size = 2

# XML config files
[*.{props,targets,ruleset,config,nuspec,resx,vsixmanifest,vsct}]
indent_size = 2

# Powershell files
[*.ps1]
indent_size = 2

# Shell script files
[*.sh]
end_of_line = lf
indent_size = 2

# CSharp code style settings:
[*.cs]
# Whitespace options
csharp_style_allow_embedded_statements_on_same_line_experimental = false
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = warning
dotnet_code_quality_unused_parameters = all:suggestion
csharp_style_var_for_built_in_types = true:suggestion
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = true:suggestion
csharp_style_expression_bodied_methods = false:none
csharp_style_expression_bodied_constructors = false:none
csharp_style_expression_bodied_operators = false:none
csharp_style_expression_bodied_properties = true:none
csharp_style_expression_bodied_indexers = true:none
csharp_style_expression_bodied_accessors = true:none
csharp_style_expression_bodied_local_functions = when_on_single_line:silent
csharp_style_pattern_matching_over_is_with_cast_check = true:error
csharp_style_pattern_matching_over_as_with_null_check = true:error
csharp_style_inlined_variable_declaration = true:error
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion
csharp_style_deconstructed_variable_declaration = true:suggestion
csharp_style_prefer_extended_property_pattern = true:suggestion
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_before_open_square_brackets = false
csharp_space_around_declaration_statements = false
csharp_space_around_binary_operators = before_and_after
csharp_space_after_cast = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_before_dot = false
csharp_space_after_dot = false
csharp_space_before_comma = false
csharp_space_after_comma = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_semicolon_in_for_statement = true
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true
csharp_prefer_braces = false:none
csharp_using_directive_placement = outside_namespace:error
csharp_prefer_static_local_function = true:warning
csharp_preferred_modifier_order = public, private, protected, internal, static, extern, new, virtual, abstract, sealed, override, readonly, unsafe, volatile, async:warning

[src/{Compilers,ExpressionEvaluator,Scripting}/**Test**/*.{cs,vb}]

# IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0060.severity = none

[src/{Analyzers,CodeStyle,Features,Workspaces,EditorFeatures,VisualStudio}/**/*.{cs,vb}]

# IDE0011: Add braces
csharp_prefer_braces = when_multiline:warning
# NOTE: We need the below severity entry for Add Braces due to https://github.com/dotnet/roslyn/issues/44201
dotnet_diagnostic.IDE0011.severity = warning

# IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0040.severity = warning

# IDE0052: Remove unread private member
dotnet_diagnostic.IDE0052.severity = warning

# IDE0059: Unnecessary assignment to a value
dotnet_diagnostic.IDE0059.severity = warning

# CA1012: Abstract types should not have public constructors
dotnet_diagnostic.CA1012.severity = warning

# CA1822: Make member static
dotnet_diagnostic.CA1822.severity = warning

# Prefer "var" everywhere
dotnet_diagnostic.IDE0007.severity = warning
csharp_style_var_for_built_in_types = true:warning
csharp_style_var_when_type_is_apparent = true:warning
csharp_style_var_elsewhere = true:warning

# csharp_style_allow_embedded_statements_on_same_line_experimental
dotnet_diagnostic.IDE2001.severity = warning

# csharp_style_allow_blank_lines_between_consecutive_braces_experimental
dotnet_diagnostic.IDE2002.severity = warning

# csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental
dotnet_diagnostic.IDE2004.severity = warning

# csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental
dotnet_diagnostic.IDE2005.severity = warning

# csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental
dotnet_diagnostic.IDE2006.severity = warning

[src/{VisualStudio}/**/*.{cs,vb}]
# CA1822: Make member static
# There is a risk of accidentally breaking an internal API that partners rely on though IVT.
dotnet_code_quality.CA1822.api_surface = private
# Dotnet code analysis settings:
[*.{cs,vb}]
# Microsoft.Analyzers.ManagedCodeAnalysis
dotnet_diagnostic.CA1801.severity = none
dotnet_diagnostic.CA1804.severity = none
dotnet_diagnostic.CA1806.severity = none
dotnet_diagnostic.CA1821.severity = none
dotnet_diagnostic.CA1823.severity = none
dotnet_diagnostic.CA1824.severity = none
dotnet_diagnostic.CA2200.severity = none

# Microsoft.NetCore.Analyzers
dotnet_diagnostic.CA2000.severity = none # Dispose objects before losing scope (Noisy - replaced with IDE0067, IDE0068, IDE0069)
dotnet_diagnostic.CA1820.severity = warning
dotnet_diagnostic.CA5360.severity = none # https://github.com/dotnet/roslyn-analyzers/issues/2683

# Microsoft.CodeQuality.Analyzers
dotnet_diagnostic.CA1000.severity = none
dotnet_diagnostic.CA1001.severity = none
dotnet_diagnostic.CA1010.severity = none
dotnet_diagnostic.CA1016.severity = none
dotnet_diagnostic.CA1018.severity = none
dotnet_diagnostic.CA1028.severity = none
dotnet_diagnostic.CA1030.severity = none
dotnet_diagnostic.CA1032.severity = none
dotnet_diagnostic.CA1033.severity = none # Interface methods should be callable by child types
dotnet_diagnostic.CA1034.severity = none
dotnet_diagnostic.CA1036.severity = warning # Override methods on comparable types
dotnet_diagnostic.CA1040.severity = none
dotnet_diagnostic.CA1041.severity = none
dotnet_diagnostic.CA1043.severity = none
dotnet_diagnostic.CA1051.severity = none
dotnet_diagnostic.CA1052.severity = none
dotnet_diagnostic.CA1054.severity = none
dotnet_diagnostic.CA1055.severity = none
dotnet_diagnostic.CA1056.severity = none
dotnet_diagnostic.CA1060.severity = none # Move P/Invokes to NativeMethods class
dotnet_diagnostic.CA1062.severity = none
dotnet_diagnostic.CA1063.severity = warning
dotnet_diagnostic.CA1064.severity = none
dotnet_diagnostic.CA1065.severity = none
dotnet_diagnostic.CA1066.severity = none
dotnet_diagnostic.CA1067.severity = warning
dotnet_diagnostic.CA1068.severity = warning
dotnet_diagnostic.CA1031.severity = none # Do not catch general exception types
dotnet_diagnostic.CA1303.severity = none
dotnet_diagnostic.CA1304.severity = none
dotnet_diagnostic.CA1707.severity = none
dotnet_diagnostic.CA1710.severity = none
dotnet_diagnostic.CA1714.severity = none
dotnet_diagnostic.CA1715.severity = none
dotnet_diagnostic.CA1716.severity = none
dotnet_diagnostic.CA1717.severity = none
dotnet_diagnostic.CA1720.severity = none
dotnet_diagnostic.CA1721.severity = none
dotnet_diagnostic.CA1724.severity = none
dotnet_diagnostic.CA1815.severity = none
dotnet_diagnostic.CA2007.severity = none
dotnet_diagnostic.CA2211.severity = none
dotnet_diagnostic.CA2213.severity = none # https://github.com/dotnet/roslyn-analyzers/issues/1796
dotnet_diagnostic.CA2218.severity = none
dotnet_diagnostic.CA2222.severity = none
dotnet_diagnostic.CA2224.severity = none
dotnet_diagnostic.CA2225.severity = none
dotnet_diagnostic.CA2227.severity = none
dotnet_diagnostic.CA2231.severity = none
dotnet_diagnostic.CA2234.severity = none

# Microsoft.NetFramework.Analyzers
dotnet_diagnostic.CA2153.severity = warning # Do not catch CorruptedStateExceptions
dotnet_diagnostic.CA2235.severity = warning
dotnet_diagnostic.CA3075.severity = warning

# Microsoft.CodeAnalysis.Analyzers
# These diagnostics apply to the source code of analyzers themselves.
# We do not have any analyzers in this repository, so disable these.
dotnet_diagnostic.RS1001.severity = none
dotnet_diagnostic.RS1002.severity = none
dotnet_diagnostic.RS1003.severity = none
dotnet_diagnostic.RS1004.severity = none
dotnet_diagnostic.RS1005.severity = none
dotnet_diagnostic.RS1006.severity = none
dotnet_diagnostic.RS1008.severity = none
dotnet_diagnostic.RS1009.severity = none
dotnet_diagnostic.RS1010.severity = none
dotnet_diagnostic.RS1011.severity = none
dotnet_diagnostic.RS1012.severity = none
dotnet_diagnostic.RS1013.severity = none
dotnet_diagnostic.RS1014.severity = warning # DoNotIgnoreReturnValueOnImmutableObjectMethodInvocation
dotnet_diagnostic.RS1015.severity = none
dotnet_diagnostic.RS1016.severity = none
dotnet_diagnostic.RS1017.severity = none
dotnet_diagnostic.RS1018.severity = none
dotnet_diagnostic.RS1019.severity = none
dotnet_diagnostic.RS1020.severity = none
dotnet_diagnostic.RS1021.severity = none
dotnet_diagnostic.RS1022.severity = none
dotnet_diagnostic.RS1023.severity = none

# Microsoft.Composition.Analyzers
dotnet_diagnostic.RS0006.severity = error # Do not mixing MEF versions
dotnet_diagnostic.RS0023.severity = error # MEF2 components must be shared

# Roslyn.Core
dotnet_diagnostic.AD0001.severity = warning # Analyzer exception

# Roslyn.Diagnostic.Analyzers
dotnet_diagnostic.RS0001.severity = warning # Use 'SpecializedCollections.EmptyEnumerable()'
dotnet_diagnostic.RS0002.severity = warning # Use 'SpecializedCollections.SingletonEnumerable()'
dotnet_diagnostic.RS0005.severity = warning # Do not use generic 'CodeAction.Create' to create 'CodeAction'
dotnet_diagnostic.RS0016.severity = warning # Do not have undeclared API
dotnet_diagnostic.RS0017.severity = warning # API is declared but not public
dotnet_diagnostic.RS0022.severity = warning # Constructor make noninheritable base class inheritable
dotnet_diagnostic.RS0024.severity = warning # The contents of the public API files are invalid:
dotnet_diagnostic.RS0025.severity = warning # Do not duplicate symbols in public API files
dotnet_diagnostic.RS0026.severity = warning # Do not add multiple public overloads with optional parameters
dotnet_diagnostic.RS0027.severity = warning # Public API with optional parameter(s) should have the most parameters amongst its public overloads.
dotnet_diagnostic.RS0030.severity = warning # Do not use banned APIs
dotnet_diagnostic.RS0031.severity = warning # The list of banned symbols contains a duplicate
dotnet_diagnostic.RS0033.severity = none # Importing constructor should be [Obsolete]
dotnet_diagnostic.RS0034.severity = none # Style rule that enforces public MEF constructor marked with [ImportingConstructor]

# System.Collections.Immutable.Analyzers
dotnet_diagnostic.RS0012.severity = warning

# System.Runtime.Analyzers
dotnet_diagnostic.CA1305.severity = none
dotnet_diagnostic.CA1307.severity = none
dotnet_diagnostic.CA1308.severity = none
dotnet_diagnostic.CA1810.severity = none
dotnet_diagnostic.CA1816.severity = none
dotnet_diagnostic.CA1825.severity = warning
dotnet_diagnostic.CA2002.severity = none
dotnet_diagnostic.CA2207.severity = none
dotnet_diagnostic.CA2208.severity = none
dotnet_diagnostic.CA2216.severity = none
dotnet_diagnostic.CA2219.severity = none
dotnet_diagnostic.CA2241.severity = none
dotnet_diagnostic.CA2242.severity = none
dotnet_diagnostic.RS0014.severity = warning

# System.Runtime.InteropServices.Analyzers
dotnet_diagnostic.CA1401.severity = none
dotnet_diagnostic.CA2101.severity = none
dotnet_diagnostic.RS0015.severity = warning

# System.Threading.Tasks.Analyzers
dotnet_diagnostic.RS0018.severity = warning

# XmlDocumentationComments.Analyzers
dotnet_diagnostic.RS0010.severity = warning

# Microsoft.CodeAnalysis.CSharp.Features
# Name:                                         Before:                                             After:
dotnet_diagnostic.IDE0001.severity = warning # Simplify names                                System.Version version;                             Version version;
dotnet_diagnostic.IDE0002.severity = warning # Simplify (member access)                      System.Version.Equals("1", "2");                    Version.Equals("1", "2");
dotnet_diagnostic.IDE0005.severity = warning # Using directive is unnecessary                using System.Text;
dotnet_diagnostic.IDE0030.severity = warning # Use coalesce expression (nullable)            int? y = x.HasValue ? x.Value : 0                   int? y = x ?? 0;
dotnet_diagnostic.IDE0030WithoutSuggestion.severity = error
dotnet_diagnostic.IDE0079.severity = warning # Unused suppresion
dotnet_diagnostic.IDE0083.severity = warning # Use pattern matching
dotnet_diagnostic.IDE0084.severity = warning # Use IsNot
dotnet_diagnostic.IDE1006.severity = warning # Naming styles                                 Task Open()                                         Task OpenAsync()
dotnet_diagnostic.IDE1006WithoutSuggestion.severity = suggestion


# Microsoft.VisualStudio.Threading.Analyzers
dotnet_diagnostic.VSTHRD200.severity = none # Naming styles                                 Task Open()                                         Task OpenAsync()
dotnet_diagnostic.VSTHRD010.severity = none # Visual Studio service should be used on main thread explicitly.
dotnet_diagnostic.VSTHRD103.severity = none # Call async methods when in an async method.
dotnet_diagnostic.VSTHRD108.severity = none # Thread affinity checks should be unconditional.
dotnet_diagnostic.VSTHRD003.severity = none # Avoid awaiting or returning a Task representing work that was not started within your context as that can lead to deadlocks
dotnet_diagnostic.VSTHRD111.severity = none # Use ConfigureAwait(true).

# Microsoft.VisualStudio.SDK.Analyzers
dotnet_diagnostic.VSSDK006.severity = none # Check whether the result of GetService calls is null

# Microsoft.CodeAnalysis.VisualBasic.CodeStyle/Microsoft.CodeAnalysis.CSharp.CodeStyle
dotnet_diagnostic.IDE0073.severity = warning # Enforce file header
#file_header_template = Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. See the LICENSE.md file in the project root for more information.
dotnet_sort_system_directives_first = true
dotnet_style_require_accessibility_modifiers = always:warning
dotnet_separate_import_directive_groups = false
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_coalesce_expression = true:error
dotnet_style_null_propagation = true:error
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = false
dotnet_style_prefer_conditional_expression_over_assignment = false
dotnet_style_prefer_auto_properties = false
dotnet_style_qualification_for_field = false:error
dotnet_style_qualification_for_property = false:error
dotnet_style_qualification_for_method = false:error
dotnet_style_qualification_for_event = false:error
dotnet_style_predefined_type_for_locals_parameters_members = true:error
dotnet_style_predefined_type_for_member_access = true:error
dotnet_style_readonly_field = true:warning
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.symbols = interface_symbols
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.style = pascal_case_and_prefix_with_I_style
dotnet_naming_rule.interfaces_must_be_pascal_cased_and_prefixed_with_I.severity = warning
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.symbols = externally_visible_symbols
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.externally_visible_members_must_be_pascal_cased.severity = warning
dotnet_naming_rule.parameters_must_be_camel_cased.symbols = parameter_symbols
dotnet_naming_rule.parameters_must_be_camel_cased.style = camel_case_style
dotnet_naming_rule.parameters_must_be_camel_cased.severity = warning
dotnet_naming_rule.constants_must_be_pascal_cased.symbols = constant_symbols
dotnet_naming_rule.constants_must_be_pascal_cased.style = pascal_case_style
dotnet_naming_rule.constants_must_be_pascal_cased.severity = warning
dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.symbols = private_static_field_symbols
dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.style = camel_case_and_prefix_with_s_underscore_style
dotnet_naming_rule.private_static_fields_must_be_camel_cased_and_prefixed_with_s_underscore.severity = warning
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.symbols = private_field_symbols
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.style = camel_case_and_prefix_with_underscore_style
dotnet_naming_rule.private_instance_fields_must_be_camel_cased_and_prefixed_with_underscore.severity = warning
dotnet_naming_symbols.externally_visible_symbols.applicable_kinds = class, struct, interface, enum, property, method, field, event, delegate
dotnet_naming_symbols.externally_visible_symbols.applicable_accessibilities = public, internal, friend, protected, protected_internal, protected_friend, private_protected
dotnet_naming_symbols.interface_symbols.applicable_kinds = interface
dotnet_naming_symbols.interface_symbols.applicable_accessibilities = *
dotnet_naming_symbols.parameter_symbols.applicable_kinds = parameter
dotnet_naming_symbols.parameter_symbols.applicable_accessibilities = *
dotnet_naming_symbols.constant_symbols.applicable_kinds = field
dotnet_naming_symbols.constant_symbols.required_modifiers = const
dotnet_naming_symbols.constant_symbols.applicable_accessibilities = *
dotnet_naming_symbols.private_static_field_symbols.applicable_kinds = field
dotnet_naming_symbols.private_static_field_symbols.required_modifiers = static, shared
dotnet_naming_symbols.private_static_field_symbols.applicable_accessibilities = private
dotnet_naming_symbols.private_field_symbols.applicable_kinds = field
dotnet_naming_symbols.private_field_symbols.applicable_accessibilities = private
dotnet_naming_style.camel_case_style.capitalization = camel_case
dotnet_naming_style.pascal_case_style.capitalization = pascal_case
dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.required_prefix = s_
dotnet_naming_style.camel_case_and_prefix_with_s_underscore_style.capitalization = camel_case
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_and_prefix_with_underscore_style.capitalization = camel_case
dotnet_naming_style.pascal_case_and_prefix_with_I_style.required_prefix = I
dotnet_naming_style.pascal_case_and_prefix_with_I_style.capitalization = pascal_case
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.symbols = non_private_static_fields
dotnet_naming_rule.non_private_static_fields_should_be_pascal_case.style = non_private_static_field_style
dotnet_naming_symbols.non_private_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_static_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_static_fields.required_modifiers = static
dotnet_naming_style.non_private_static_field_style.capitalization = pascal_case
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.symbols = non_private_readonly_fields
dotnet_naming_rule.non_private_readonly_fields_should_be_pascal_case.style = non_private_readonly_field_style
dotnet_naming_symbols.non_private_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.non_private_readonly_fields.applicable_accessibilities = public, protected, internal, protected_internal, private_protected
dotnet_naming_symbols.non_private_readonly_fields.required_modifiers = readonly
dotnet_naming_style.non_private_readonly_field_style.capitalization = pascal_case
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style
dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const
dotnet_naming_style.constant_style.capitalization = pascal_case
dotnet_naming_rule.static_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.static_fields_should_be_camel_case.symbols = static_fields
dotnet_naming_rule.static_fields_should_be_camel_case.style = static_field_style
dotnet_naming_symbols.static_fields.applicable_kinds = field
dotnet_naming_symbols.static_fields.required_modifiers = static
dotnet_naming_style.static_field_style.capitalization = camel_case
dotnet_naming_style.static_field_style.required_prefix = s_
dotnet_naming_rule.instance_fields_should_be_camel_case.severity = suggestion
dotnet_naming_rule.instance_fields_should_be_camel_case.symbols = instance_fields
dotnet_naming_rule.instance_fields_should_be_camel_case.style = instance_field_style
dotnet_naming_symbols.instance_fields.applicable_kinds = field
dotnet_naming_style.instance_field_style.capitalization = camel_case
dotnet_naming_style.instance_field_style.required_prefix = _
dotnet_naming_rule.locals_should_be_camel_case.severity = suggestion
dotnet_naming_rule.locals_should_be_camel_case.symbols = locals_and_parameters
dotnet_naming_rule.locals_should_be_camel_case.style = camel_case_style
dotnet_naming_symbols.locals_and_parameters.applicable_kinds = parameter, local
dotnet_naming_rule.local_functions_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.local_functions_should_be_pascal_case.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascal_case.style = local_function_style
dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_style.local_function_style.capitalization = pascal_case
dotnet_naming_rule.members_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.members_should_be_pascal_case.symbols = all_members
dotnet_naming_rule.members_should_be_pascal_case.style = pascal_case_style
dotnet_naming_symbols.all_members.applicable_kinds = *
#file_header_template = Licensed to the .NET Foundation under one or more agreements.\nThe .NET Foundation licenses this file to you under the MIT license.\nSee the LICENSE file in the project root for more information.
dotnet_public_api_analyzer.require_api_files = true
dotnet_diagnostic.IDE0055.severity = warning